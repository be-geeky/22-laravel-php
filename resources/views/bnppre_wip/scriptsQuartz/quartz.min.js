(function() {
    "use strict";
    var _storedPlayers = [];
    window.Quartz = {};
    Object.defineProperties(Quartz, {
        "VERSION" : {
            enumerable: !0,
    		writable: !1,
            value: "dev"
        },
        "CLASSNAME" : {
            enumerable: !0,
            writable: !1,
            value: "quartz-player"
        }
    });
    Object.defineProperty(Quartz, "createPlayer", {
        enumerable: !0,
        writable: !1,
        value: function(domElement, videoElement) {
            if (typeof domElement == "string") {
                domElement = document.getElementById(domElement)
            }
            if (typeof domElement == "undefined" || domElement == null) {
                domElement = document.createElement("div");
                domElement.className = Quartz.CLASSNAME
            }
            var player = new Quartz.Player(domElement, videoElement);
            if (domElement.hasAttribute("data-poster")) {
                player.poster = domElement.getAttribute("data-poster")
            }
            if (domElement.hasAttribute("data-src")) {
                player.src = domElement.getAttribute("data-src")
            }
            if (domElement.hasAttribute("data-audio")) {
                player.audio = domElement.getAttribute("data-audio")
            }
            if (domElement.hasAttribute("data-xml")) {
                player.xml = domElement.getAttribute("data-xml")
            }
            if (domElement.hasAttribute("data-fov")) {
                player.fov = domElement.getAttribute("data-fov")
            }
            if (domElement.hasAttribute("data-type")) {
                player.type = domElement.getAttribute("data-type")
            }
            if (domElement.getAttribute("data-loop") == "true") {
                player.loop = !0
            }
            if (domElement.hasAttribute("data-controls")) {
                var controls = domElement.getAttribute("data-controls").toString().split(",");
                for (var i in controls) {
                    switch (controls[i]) {
                        case "display":
                            player.addControls(new Quartz.DisplayControls);
                            break;
                        case "gyro":
                            player.addControls(new Quartz.GyroControls);
                            break;
                        case "keyboard":
                            player.addControls(new Quartz.KeyboardControls);
                            break;
                        case "mouse":
                            player.addControls(new Quartz.MouseControls);
                            break;
                        case "touch":
                            player.addControls(new Quartz.TouchControls);
                            break
                    }
                }
            }
            _storedPlayers.push(player);
            return player
        }
    });
    Object.defineProperties(Quartz, {
        "getPlayers" : {
            enumerable: !0,
            writable: !1,
            value: function() {
                return _storedPlayers
            }
        },
        "getPlayerById" : {
            enumerable: !0,
            writable: !1,
            value: function(id) {
                var player;
                for (var i in _storedPlayers) {
                    if (_storedPlayers[i].domElement.id == id) {
                        player = _storedPlayers[i]
                    }
                }
                return player
            }
        }
    });
})();
(function() {
    "use strict";
    Quartz.Loader = function() {
        Object.defineProperty(this, "chunkSize", {
            enumerable: !0,
            writable: !0,
            value: 1048576
        });
        Object.defineProperty(this, "blob", {
            enumerable: !1,
            writable: !0,
            value: new Blob([])
        });
        Object.defineProperty(this, "onLoad", {
            enumerable: !1,
            writable: !0,
            value: function() {}
        });
        Object.defineProperty(this, "onChunkLoad", {
            enumerable: !1,
            writable: !0,
            value: function() {}
        });
        Object.defineProperty(this, "onError", {
            enumerable: !1,
            writable: !0,
            value: function() {}
        });
    };
    Object.defineProperty(Quartz.Loader.prototype, "load", {
        enumerable: !0,
        writable: !1,
        value: function(url, onLoad, onChunkLoad, onError) {
            this.onLoad = typeof onLoad != "undefined" ? onLoad : function() {};
            this.onChunkLoad = typeof onChunkLoad != "undefined" ? onChunkLoad : function() {};
            this.onError = typeof onError != "undefined" ? onError : function() {};
            this.sendRequest(url, 0)
        }
    });
    Object.defineProperty(Quartz.Loader.prototype, "sendRequest", {
        enumerable: !1,
        writable: !1,
        value: function(url, step) {
            var startByte = step * this.chunkSize;
            var endByte = (step + 1) * this.chunkSize - 1;
            var rangeHeader = "bytes=" + startByte + "-" + endByte;
            var xhr = new XMLHttpRequest;
            xhr.responseType = "blob";
            xhr.open("GET", url + "#" + Date.now() % 36e5, !0);
            xhr.addEventListener("load", this.handleResponse.bind(this, url, step), !1);
            xhr.addEventListener("error", this.dispatch.bind(this, "error"), !1);
            xhr.setRequestHeader("Range", rangeHeader);
            xhr.send(null)
        }
    });
    Object.defineProperty(Quartz.Loader.prototype, "handleResponse", {
        enumerable: !1,
        writable: !1,
        value: function(url, step, event) {
            this.blob = new Blob([this.blob, event.target.response]);
            this.dispatch("chunkload", this.blob);
            if (event.loaded < this.chunkSize) {
                this.dispatch("load", this.blob)
            } else {
                step++;
                this.sendRequest(url, step)
            }
        }
    });
    Object.defineProperty(Quartz.Loader.prototype, "dispatch", {
        configurable: !0,
        enumerable: !1,
        writable: !1,
        value: function(eventType) {
            switch (eventType) {
                case "load":
                    this.onLoad(this.blob);
                    break;
                case "chunkload":
                    this.onChunkLoad(this.blob);
                    break;
                case "error":
                    this.onError();
                    break
            }
        }
    })
})();
(function() {
    "use strict";
    Quartz.Updater = function(domElement) {
        var _fullScreen = !1;
        Object.defineProperty(this, "domElement", {
            writable: !1,
            enumerable: !0,
            value: domElement || document.createElement("div")
        });
        Object.defineProperty(this, "coverElement", {
            writable: !1,
            enumerable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "camera", {
            writable: !1,
            enumerable: !1,
            value: new THREE.PerspectiveCamera(60, 1, 1, 100)
        });
        Object.defineProperty(this, "stereoCamera", {
            writable: !1,
            enumerable: !1,
            value: new THREE.StereoCamera
        });
        this.stereoCamera.aspect = .5;
        Object.defineProperty(this, "renderer", {
            writable: !1,
            enumerable: !1,
            value: new THREE.WebGLRenderer
        });
        Object.defineProperty(this, "scene", {
            writable: !1,
            enumerable: !1,
            value: new THREE.Scene
        });
        Object.defineProperty(this, "requestId", {
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(Quartz.Updater.prototype, "fullScreen", {
            get: function() {
                return _fullScreen
            },
            set: function(newFullScreen) {
                var parentNode = this.domElement.parentNode;
                if (newFullScreen === !0) {
                    if (parentNode.requestFullscreen) {
                        parentNode.requestFullscreen()
                    } else if (parentNode.msRequestFullscreen) {
                        parentNode.msRequestFullscreen()
                    } else if (parentNode.mozRequestFullScreen) {
                        parentNode.mozRequestFullScreen()
                    } else if (parentNode.webkitRequestFullscreen) {
                        parentNode.webkitRequestFullscreen()
                    }
                } else {
                    if (document.exitFullscreen) {
                        document.exitFullscreen()
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen()
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen()
                    } else if (document.webkitExitFullscreen) {
                        document.webkitExitFullscreen()
                    }
                }
                _fullScreen = newFullScreen
            }
        });
        Object.defineProperty(Quartz.Updater.prototype, "stereo", {
            enumerable: !0,
            writable: !0,
            value: !1
        });
        this.domElement.innerHTML = "";
        this.domElement.appendChild(this.renderer.domElement);
        window.addEventListener("resize", this.fit.bind(this), !1);
        this.fit()
    };
    Object.defineProperty(Quartz.Updater.prototype, "fov", {
        enumerable: !0,
        get: function() {
            return this.camera.fov
        },
        set: function(newFov) {
            if (isNaN(newFov)) {
                return
            }
            this.camera.fov = newFov;
            this.camera.updateProjectionMatrix()
        }
    });
    Object.defineProperty(Quartz.Updater.prototype, "start", {
        configurable: !0,
        enumerable: !0,
        writable: !1,
        value: function() {
            if (this.requestId < 1) {
                this.requestId = window.requestAnimationFrame(this.update.bind(this))
            }
        }
    });
    Object.defineProperty(Quartz.Updater.prototype, "stop", {
        configurable: !0,
        enumerable: !0,
        writable: !1,
        value: function() {
            if (this.requestId > 0) {
                window.cancelAnimationFrame(this.requestId);
                this.requestId = 0
            }
        }
    });
    Object.defineProperty(Quartz.Updater.prototype, "render", {
        configurable: !0,
        enumerable: !1,
        writable: !1,
        value: function() {
            var size = this.renderer.getSize();
            if (this.stereo) {
                this.scene.updateMatrixWorld();
                if (this.camera.parent == null) {
                    this.camera.updateMatrixWorld()
                }
                this.stereoCamera.update(this.camera);
                this.renderer.setScissorTest(!0);
                this.renderer.clear();
                this.renderer.setScissor(0, 0, size.width / 2, size.height);
                this.renderer.setViewport(0, 0, size.width / 2, size.height);
                this.renderer.render(this.scene, this.stereoCamera.cameraL);
                this.renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);
                this.renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);
                this.renderer.render(this.scene, this.stereoCamera.cameraR);
                this.renderer.setScissorTest(!1)
            } else {
                this.renderer.setViewport(0, 0, size.width, size.height);
                this.renderer.render(this.scene, this.camera)
            }
        }
    });
    Object.defineProperty(Quartz.Updater.prototype, "update", {
        configurable: !0,
        enumerable: !1,
        writable: !1,
        value: function(timestamp) {
            if (this.requestId < 1) {
                return
            }
            this.render();
            if (this.coverElement.parentNode != this.domElement && Quartz.LICENSE != "ok") {
                this.domElement.appendChild(this.coverElement)
            }
            if (this.coverElement.parentNode == this.domElement && Quartz.LICENSE == "ok") {
                this.domElement.removeChild(this.coverElement)
            }
            this.coverElement.style.width = this.renderer.domElement.style.width;
            this.coverElement.style.height = this.renderer.domElement.style.height;
            this.coverElement.style.position = "absolute";
            this.coverElement.style.top = "0px";
            this.coverElement.style.backgroundColor = "white";
            this.coverElement.style.opacity = "0.5";
            this.coverElement.style.fontFamily = "Lato";
            this.coverElement.style.color = "black";
            this.coverElement.style.textAlign = "center";
            this.coverElement.style.pointerEvents = "none";
            this.coverElement.innerHTML = " QuartzVR ";
            this.requestId = window.requestAnimationFrame(this.update.bind(this, timestamp))
        }
    });
    Object.defineProperty(Quartz.Updater.prototype, "fit", {
        writable: !1,
        enumerable: !0,
        value: function() {
            var containerWidth = this.domElement.getBoundingClientRect().width;
            var containerHeight = this.domElement.getBoundingClientRect().height;
            this.camera.aspect = containerWidth / containerHeight;
            this.camera.updateProjectionMatrix();
            this.renderer.setSize(containerWidth, containerHeight)
        }
    })
})();
(function() {
    "use strict";
    Quartz.EventTarget = function(targetElement) {
        if (typeof targetElement == "undefined" || typeof targetElement.addEventListener == "undefined" || typeof targetElement.dispatchEvent == "undefined" || typeof targetElement.removeEventListener == "undefined") {
            targetElement = document.createDocumentFragment()
        }
        Object.defineProperty(this, "addEventListener", {
            writable: !1,
            value: targetElement.addEventListener.bind(targetElement)
        });
        Object.defineProperty(this, "dispatchEvent", {
            writable: !1,
            value: targetElement.dispatchEvent.bind(targetElement)
        });
        Object.defineProperty(this, "removeEventListener", {
            writable: !1,
            value: targetElement.removeEventListener.bind(targetElement)
        })
    }
})();
(function() {
    "use strict";
    Quartz.DefaultPlayer = function(domElement, videoElement) {
        Quartz.Updater.call(this, domElement);
        Quartz.EventTarget.call(this, domElement);
        var _poster = "";
        var _xml = "";
        Object.defineProperty(this, "poster", {
            enumerable: !0,
            get: function() {
                return _poster
            },
            set: function(newSrc) {
                _poster = newSrc;
                var loader = new THREE.TextureLoader;
                loader.crossOrigin = "anonymous";
                loader.load(newSrc, this.onPosterLoad.bind(this), function(xhr) {}, function(xhr) {})
            }
        });
        Object.defineProperty(this, "src", {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return this.sourceElement.src
            },
            set: function(newSrc) {
                this.sourceElement.src = newSrc;
                this.videoElement.crossOrigin = "anonymous";
                if (this.sourceElement.parentNode != this.videoElement) {
                    this.videoElement.appendChild(this.sourceElement)
                }
                if (this.type == "application/x-mpegURL") {
                    if (typeof Hls == "undefined") {
                        console.warn("hls.js is needed in order to reader video stream.");
                        return
                    }
                    if (!Hls.isSupported()) {
                        console.warn("hls.js is not supported.");
                        return
                    }
                    var hls = new Hls;
                    hls.loadSource(this.sourceElement.src);
                    hls.attachMedia(this.videoElement)
                }
            }
        });
        Object.defineProperty(this, "xml", {
            enumerable: !0,
            get: function() {
                return xmlSrc
            },
            set: function(newSrc) {
                this.experience.parse(newSrc);
                _xml = newSrc
            }
        });
        Object.defineProperty(this, "type", {
            enumerable: !0,
            get: function() {
                return this.sourceElement.type
            },
            set: function(newType) {
                this.sourceElement.type = newType;
                if (this.type == "application/x-mpegURL") {
                    if (typeof Hls == "undefined") {
                        console.warn("hls.js is needed in order to reader video stream.");
                        return
                    }
                    if (!Hls.isSupported()) {
                        console.warn("hls.js is not supported.");
                        return
                    }
                    var hls = new Hls;
                    hls.loadSource(this.sourceElement.src);
                    hls.attachMedia(this.videoElement)
                }
            }
        });
        Object.defineProperty(this, "controls", {
            enumerable: !1,
            writable: !1,
            value: []
        });
        Object.defineProperty(this, "videoElement", {
            writable: !1,
            enumerable: !1,
            configurable: !0,
            value: videoElement || document.createElement("video")
        });
        Object.defineProperty(this, "sourceElement", {
            writable: !1,
            enumerable: !1,
            value: document.createElement("source")
        });
        Object.defineProperty(this, "mediaElement", {
            configurable: !0,
            enumerable: !1,
            get: function() {
                return this.videoElement
            }
        });
        Object.defineProperty(this, "experience", {
            enumerable: !1,
            writable: !1,
            value: new Quartz.Experience(this)
        });
        var material = new THREE.MeshBasicMaterial({
            color: 0
        });
        material.name = "default";
        var geometry = new THREE.SphereGeometry(100, 50, 50);
        geometry.scale(-1, 1, 1);
        Object.defineProperty(this, "mesh", {
            enumerable: !1,
            writable: !1,
            value: new THREE.Mesh(geometry, material)
        });
        this.scene.add(this.mesh);
        this.videoElement.addEventListener("loadeddata", this.onVideoLoadedData.bind(this), !1);
        this.videoElement.addEventListener("seeking", this.onVideoSeeking.bind(this), !1);
        this.videoElement.addEventListener("play", this.onVideoPlay.bind(this), !1);
        this.domElement.addEventListener("dblclick", this.onDoubleClick.bind(this), !1);
        var player = this;
        var eventNames = ["ended", "loadeddata", "loadedmetadata", "play", "playing", "timeupdate"];
        for (var i = 0; i < eventNames.length; i++) {
            this.videoElement.addEventListener(eventNames[i], function(event) {
                var eventInit = {
                    bubbles: event.bubbles,
                    cancelable: event.cancelable
                };
                player.dispatchEvent(new Event(event.type, eventInit))
            }, !1)
        }
        this.start()
    };
    Quartz.DefaultPlayer.prototype = Object.create(Quartz.Updater.prototype);
    Quartz.DefaultPlayer.prototype = Object.assign(Quartz.DefaultPlayer.prototype, Quartz.EventTarget.prototype);
    Quartz.DefaultPlayer.prototype.constructor = Quartz.DefaultPlayer;
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "currentTime", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.currentTime
        },
        set: function(newCurrenTime) {
            this.mediaElement.currentTime = newCurrenTime
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "duration", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.duration
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "loop", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.loop
        },
        set: function(newLoop) {
            this.mediaElement.loop = newLoop
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "muted", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.muted
        },
        set: function(newMuted) {
            this.mediaElement.muted = newMuted
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "paused", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.paused
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "volume", {
        enumerable: !0,
        get: function() {
            return this.mediaElement.volume
        },
        set: function(newVolume) {
            this.mediaElement.volume = newVolume
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "play", {
        writable: !1,
        value: function() {
            this.mediaElement.play()
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "pause", {
        writable: !1,
        value: function() {
            this.mediaElement.pause()
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "render", {
        writable: !1,
        enumerable: !1,
        value: function() {
            var euler = new THREE.Euler(0, Math.PI / 2, 0, "YXZ");
            for (var i in this.controls) {
                euler.x = euler.x + this.controls[i].euler.x;
                euler.y = euler.y + this.controls[i].euler.y;
                euler.z = euler.z + this.controls[i].euler.z
            }
            this.camera.quaternion.setFromEuler(euler);
            Quartz.Updater.prototype.render.call(this);
            this.experience.intersectHotspots("gaze")
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "addControls", {
        enumerable: !0,
        writable: !1,
        value: function(newControls) {
            if (newControls instanceof Quartz.Controls && this.controls.indexOf(newControls) < 0) {
                this.controls.push(newControls);
                if (newControls.player != this) {
                    newControls.player = this
                }
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "removeControls", {
        enumerable: !0,
        writable: !1,
        value: function(oldControls) {
            var index = this.controls.indexOf(oldControls);
            if (index > -1) {
                this.controls.splice(index, 1);
                if (oldControls.player == this) {
                    oldControls.player = null
                }
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "removeAllControls", {
        enumerable: !0,
        writable: !1,
        value: function() {
            for (var i = this.controls.length - 1; i > -1; i--) {
                this.removeControls(this.controls[i])
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "applyVideoTexture", {
        writable: !1,
        enumerable: !1,
        value: function() {
            var texture = new THREE.VideoTexture(this.videoElement);
            texture.minFilter = THREE.LinearFilter;
            var oldMap = this.mesh.material.map;
            this.mesh.material = new THREE.MeshBasicMaterial({
                map: texture
            });
            this.mesh.material.name = "video";
            if (oldMap != null) {
                oldMap.dispose();
                console.log(this.renderer.info)
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "onPosterLoad", {
        writable: !1,
        enumerable: !1,
        value: function(texture) {
            if (this.videoElement.currentTime == 0 && this.paused) {
                texture.minFilter = THREE.LinearFilter;
                var oldMap = this.mesh.material.map;
                this.mesh.material = new THREE.MeshBasicMaterial({
                    map: texture
                });
                this.mesh.material.name = "image";
                if (oldMap != null) {
                    oldMap.dispose()
                }
                var cover = document.getElementById("cover");
                if (cover) {
                    setTimeout(function() {
                        cover.style.opacity = 0
                    }, 100)
                }
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "onVideoLoadedData", {
        writable: !1,
        enumerable: !1,
        value: function(event) {
            if (this.mesh.material.name == "default" && this.poster == "") {
                this.applyVideoTexture()
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "onVideoPlay", {
        writable: !1,
        enumerable: !1,
        value: function(event) {
            if (this.mesh.material.name != "video") {
                this.applyVideoTexture()
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "onVideoSeeking", {
        writable: !1,
        enumerable: !1,
        value: function(event) {
            if (this.mesh.material.name != "video") {
                this.applyVideoTexture()
            }
        }
    });
    Object.defineProperty(Quartz.DefaultPlayer.prototype, "onDoubleClick", {
        writable: !1,
        enumerable: !1,
        value: function(event) {
            var pageX = (event.pageX - this.domElement.getBoundingClientRect().left) / this.domElement.getBoundingClientRect().width * 2 - 1;
            var pageY = (event.pageY - this.domElement.getBoundingClientRect().top) / this.domElement.getBoundingClientRect().height * 2 - 1;
            this.experience.intersectHotspots("dblclick", new THREE.Vector2(pageX, -pageY))
        }
    })
})();
(function() {
    "use strict";
    Quartz.iOSPlayer = function(element) {
        Quartz.DefaultPlayer.call(this, element);
        Object.defineProperty(this, "src", {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return this.videoElement.src
            },
            set: function(newSrc) {
                this.videoElement.src = newSrc;
                this.videoElement.load()
            }
        })
    };
    Quartz.iOSPlayer.prototype = Object.create(Quartz.DefaultPlayer.prototype);
    Quartz.iOSPlayer.prototype.constructor = Quartz.iOSPlayer
})();
(function() {
    "use strict";
    Quartz.iPhonePlayer = function(element) {
        Quartz.iOSPlayer.call(this, element);
        Object.defineProperty(this, "audio", {
            configurable: !0,
            get: function() {
                return this.audioElement.src
            },
            set: function(newSrc) {
                this.audioElement.src = newSrc
            }
        });
        Object.defineProperty(this, "audioElement", {
            writable: !1,
            enumerable: !1,
            value: document.createElement("audio")
        });
        Object.defineProperty(this, "mediaElement", {
            configurable: !0,
            enumerable: !1,
            get: function() {
                return this.audioElement
            }
        })
    };
    Quartz.iPhonePlayer.prototype = Object.create(Quartz.iOSPlayer.prototype);
    Quartz.iPhonePlayer.prototype.constructor = Quartz.iPhonePlayer;
    Object.defineProperty(Quartz.iPhonePlayer.prototype, "render", {
        writable: !1,
        enumerable: !1,
        value: function(timestamp) {
            this.videoElement.currentTime = this.audioElement.currentTime;
            Quartz.DefaultPlayer.prototype.render.call(this)
        }
    });
    Object.defineProperty(Quartz.iPhonePlayer.prototype, "update", {
        configurable: !0,
        enumerable: !0,
        writable: !1,
        value: function(timestamp) {
            if (this.requestId < 1) {
                return
            }
            this.render();
            var player = this;
            setTimeout(function() {
                player.requestId = window.requestAnimationFrame(function(timestamp) {
                    player.update(timestamp)
                })
            }, 25, this)
        }
    })
})();
(function() {
    "use strict";
    Quartz.Hotspot = function(geometryType) {
        console.log("Creation of a hotspot");
        var _geometry = null;
        var _backgroundSrc = "";
		var _type = "";
		var _typeDest = "";
        var _loadingEffect = "";
        var _loadingOption = null;
        switch (geometryType) {
            case "circle":
                _geometry = new THREE.CircleGeometry(8, 64);
                break;
            case "square":
            default:
                _geometry = new THREE.PlaneGeometry(16, 16)
        }
        THREE.Mesh.call(this, _geometry, new THREE.MeshBasicMaterial);
        Object.defineProperty(this, "texture", {
            enumerable: !1,
            writable: !0,
            value: null
        });
		Object.defineProperty(this, "type", {
			enumerable: !1,
			get: function() {
				return _type;
			},
			set: function(t, dest) {
				_type = t;
				_typeDest = dest;
			}
		});
        Object.defineProperty(this, "backgroundSrc", {
            enumerable: !0,
            get: function() {
                return _backgroundSrc
            },
            set: function(newSrc) {
                _backgroundSrc = newSrc;
                var loader = new THREE.TextureLoader;
                loader.crossOrigin = "anonymous";
                loader.load(newSrc, this.onBackgroundLoad.bind(this), function(xhr) {}, function(xhr) {})
            }
        });
        Object.defineProperty(this, "backgroundColor", {
            enumerable: !0,
            get: function() {
                return this.material.color
            },
            set: function(newColor) {
                this.material = new THREE.MeshBasicMaterial({
                    color: newColor
                })
            }
        });
        Object.defineProperty(this, "triggers", {
            enumerable: !0,
            writable: !0,
            value: []
        });
        Object.defineProperty(this, "shift", {
            enumerable: !0,
            writable: !0,
            value: []
        });
        Object.defineProperty(this, "loadingDuration", {
            enumerable: !0,
            writable: !0,
            value: 0
        });
        Object.defineProperty(this, "loadingEffect", {
            enumerable: !0,
            get: function() {
                return _loadingEffect
            },
            set: function(newEffect) {
                var openingIndex = newEffect.indexOf("(");
                var closingIndex = newEffect.indexOf(")");
                if (openingIndex != -1 && closingIndex != -1) {
                    _loadingEffect = newEffect.substring(0, openingIndex);
                    _loadingOption = newEffect.substring(openingIndex + 1, closingIndex)
                } else {
                    _loadingEffect = newEffect;
                    _loadingOption = null
                }
            }
        });
        Object.defineProperty(this, "loadingOption", {
            enumerable: !0,
            get: function() {
                return _loadingOption
            }
        })
    };
    Quartz.Hotspot.prototype = Object.create(THREE.Mesh.prototype);
    Quartz.Hotspot.prototype.constructor = Quartz.Hotspot;

    Object.defineProperty(Quartz.Hotspot.prototype, "dispose", {
        writable: !1,
        enumerable: !1,
        value: function() {
            if (this.texture != null) {
                this.texture.dispose()
            }
            this.material.dispose();
            this.geometry.dispose()
        }
    });
    Object.defineProperty(Quartz.Hotspot.prototype, "onBackgroundLoad", {
        writable: !1,
        enumerable: !1,
        value: function(texture) {
            if (this.texture != null) {
                this.texture.dispose()
            }
            this.texture = texture;
            this.texture.minFilter = THREE.LinearFilter;
            this.material = new THREE.MeshBasicMaterial({
                map: this.texture,
                color: this.backgroundColor
            });
            this.material.transparent = !0
        }
    })
})();
(function() {
    "use strict";
    Quartz.Experience = function(player) {
        Object.defineProperties(this, {
            "player" : {
                enumerable: !0,
                writable: !1,
                value: player
            },
            "defaultConfig" : {
                enumerable: !1,
                writable: !1,
                value: {
                    transitionDelay: 1e3,
                    transitionDuration: 1e3,
                    transitionType: "travelling"
                }
            },
            "config" : {
                enumerable: !1,
                writable: !0,
                value: {}
            },
            "xmlDocument" : {
                enumerable: !1,
                writable: !0,
                value: null
            },
            "hotspots" : {
                enumerable: !1,
                writable: !0,
                value: []
            },
            "startMediaId" : {
                enumerable: !1,
                writable: !0,
                value: null
            },
            "raycaster" : {
                enumerable: !1,
                writable: !1,
                value: new THREE.Raycaster
            },
            "intersectedData" : {
                enumerable: !1,
                writable: !0,
                value: {}
            }
        });
    };
    Object.defineProperty(Quartz.Experience.prototype, "addHotspot", {
        enumerable: !0,
        writable: !1,
        value: function(newHotspot) {
            if (newHotspot instanceof Quartz.Hotspot && this.hotspots.indexOf(newHotspot) < 0) {
                this.hotspots.push(newHotspot);
                this.player.mesh.add(newHotspot)
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "removeHotspot", {
        enumerable: !0,
        writable: !1,
        value: function(oldHotspot) {
            var index = this.hotspots.indexOf(oldHotspot);
            if (index > -1) {
                this.hotspots.splice(index, 1);
                oldHotspot.parent.remove(oldHotspot);
                oldHotspot.dispose()
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "removeAllHotspots", {
        enumerable: !0,
        writable: !1,
        value: function() {
            for (var i = this.hotspots.length - 1; i > -1; i--) {
                this.removeHotspot(this.hotspots[i])
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "intersectHotspots", {
        enumerable: !0,
        writable: !1,
        value: function(trigger, intersectPoint) {
            var coords = intersectPoint || new THREE.Vector2(0, 0);
            this.raycaster.setFromCamera(coords, this.player.camera);
            var intersects = this.raycaster.intersectObjects(this.hotspots, !0);
            if (intersects < 1) {
                if (typeof this.intersectedData.hotspot != "undefined") {
                    this.intersectedData.hotspot.backgroundSrc = this.intersectedData.filename
                }
                this.intersectedData = {};
                return
            }
            var hotspot = intersects[0].object;
            if (hotspot.triggers.indexOf(trigger) < 0) {
                return
            }
            if (trigger == "dblclick" || trigger == "tap") {
                this.navigate(hotspot.name, hotspot.shift);
                return
            }
            if (trigger == "gaze") {
                if (typeof this.intersectedData.hotspot == "undefined" || typeof this.intersectedData.time == "undefined") {
                    console.log("loading");
                    this.intersectedData.hotspot = hotspot;
                    this.intersectedData.time = Date.now();
                    this.intersectedData.filename = hotspot.backgroundSrc;
                    if (hotspot.loadingEffect == "spritesheet") {
                        var filename = hotspot.backgroundSrc.split(".");
                        var extension = filename.pop();
                        filename = filename.join(".");
                        hotspot.backgroundSrc = filename + "_1." + extension
                    }
                    return
                }
                var remaingTime = this.intersectedData.time + this.intersectedData.hotspot.loadingDuration - Date.now();
                if (remaingTime > 0) {
                    if (hotspot.loadingEffect == "spritesheet") {
                        var step = 1 - remaingTime / this.intersectedData.hotspot.loadingDuration;
                        step = step * parseInt(this.intersectedData.hotspot.loadingOption, 10) + 1;
                        step = parseInt(step, 10);
                        var filename = hotspot.backgroundSrc.split(".");
                        var fileExt = filename.pop();
                        filename = filename.join(".");
                        filename = filename.split("_");
                        filename.pop();
                        filename = filename.join(".");
                        var src = filename + "_" + step + "." + fileExt;
                        if (hotspot.backgroundSrc != src) {
                            hotspot.backgroundSrc = src
                        }
                    }
                } else {
                    if (!this.intersectedData.navigating) {
                        this.intersectedData.navigating = !0;
                        this.navigate(hotspot.name, hotspot.shift)
                    }
                }
                return
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "navigate", {
        enumerable: !0,
        writable: !1,
        value: function(mediaName, mediaShift) {
            var cover = document.getElementById("cover");
            var delay = 0;
            var experience = this;
            if (cover) {
                delay = 550;
                cover.style.opacity = 1
            }
            setTimeout(function() {
                experience.clean();
                experience.parseMedia(mediaName);
                experience.parseHotspots(mediaName);
                if (typeof mediaShift != "undefined") {
                    if (mediaShift.length == 3) {
                        var shiftControls = new Quartz.Controls("shift");
                        shiftControls.euler.x = THREE.Math.degToRad(parseInt(mediaShift[0], 10));
                        shiftControls.euler.y = THREE.Math.degToRad(-parseInt(mediaShift[1], 10));
                        shiftControls.euler.z = THREE.Math.degToRad(parseInt(mediaShift[2], 10));
                        experience.player.addControls(shiftControls)
                    }
                }
            }, delay)
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "parse", {
        enumerable: !0,
        writable: !1,
        value: function(src) {
            var xhr = new XMLHttpRequest;
            xhr.addEventListener("load", this.onXmlLoad.bind(this), !1);
            xhr.open("GET", src + "#" + Date.now() % 36e5, !0);
            xhr.send()
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "clean", {
        enumerable: !1,
        writable: !1,
        value: function() {
            this.removeAllHotspots();
            this.player.removeAllControls()
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "parseConfig", {
        writable: !1,
        enumerable: !1,
        value: function() {
            var experienceRequest = "/experience";
            var experienceResult = this.xmlDocument.evaluate(experienceRequest, this.xmlDocument, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
            var experienceNode = experienceResult.iterateNext();
            while (experienceNode) {
                this.startMediaId = experienceNode.getAttribute("startMediaId");
                break
            }
            if (this.startMediaId == null) {
                console.warn("must set start media Id")
            }
            var paramRequest = "/experience/config/param";
            var paramResult = this.xmlDocument.evaluate(paramRequest, this.xmlDocument, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
            var paramNode = paramResult.iterateNext();
            while (paramNode) {
                if (paramNode.hasAttribute("key") && paramNode.hasAttribute("value")) {
                    this.config[paramNode.getAttribute("key")] = paramNode.getAttribute("value")
                }
                paramNode = paramResult.iterateNext()
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "parseMedia", {
        writable: !1,
        enumerable: !1,
        value: function(mediaId) {
            console.log("Request for media = " + mediaId);
            var mediaRequest = "/experience/media[@id='" + mediaId + "']";
            var mediaResult = this.xmlDocument.evaluate(mediaRequest, this.xmlDocument, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
            var mediaNode = mediaResult.iterateNext();
            while (mediaNode) {
                console.log("tour de boucle");
                var controls = mediaNode.hasAttribute("controls") ? mediaNode.getAttribute("controls") : "gyro,touch,mouse,keyboard,display";
                controls = controls.toString().split(",");
                for (var i in controls) {
                    switch (controls[i]) {
                        case "display":
                            this.player.addControls(new Quartz.DisplayControls);
                            break;
                        case "gyro":
                            this.player.addControls(new Quartz.GyroControls);
                            break;
                        case "keyboard":
                            this.player.addControls(new Quartz.KeyboardControls);
                            break;
                        case "mouse":
                            this.player.addControls(new Quartz.MouseControls);
                            break;
                        case "touch":
                            this.player.addControls(new Quartz.TouchControls);
                            break
                    }
                }
                if (mediaNode.hasAttribute("poster")) {
                    this.player.poster = mediaNode.getAttribute("poster")
                }
                if (mediaNode.hasAttribute("src")) {
                    this.player.src = mediaNode.getAttribute("src")
                }
                break
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "parseHotspots", {
        writable: !1,
        enumerable: !1,
        value: function(mediaId) {
            var hotspotRequest = "/experience/media[@id='" + mediaId + "']/hotspot";
            var hotspotResult = this.xmlDocument.evaluate(hotspotRequest, this.xmlDocument, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
            var hotspotNode = hotspotResult.iterateNext();
            var positionNode = null;
            while (hotspotNode) {
                positionNode = hotspotNode.getElementsByTagName("position");
                if (positionNode.length != 1) {
                    continue
                }
                positionNode = positionNode.item(0);
                if (!positionNode.hasAttributes("depth") || !positionNode.hasAttribute("latitude") || !positionNode.hasAttribute("longitude")) {
                    continue
                }
                var depth = parseFloat(positionNode.getAttribute("depth"));
                var latitude = THREE.Math.degToRad(positionNode.getAttribute("latitude"));
                var longitude = THREE.Math.degToRad(positionNode.getAttribute("longitude"));
                var paramNodes = hotspotNode.getElementsByTagName("param");
                var params = Object.create(this.config);
                for (var i = 0; i < paramNodes.length; i++) {
                    if (paramNodes.item(i).hasAttribute("key") && paramNodes.item(i).hasAttribute("value")) {
                        params[paramNodes.item(i).getAttribute("key")] = paramNodes.item(i).getAttribute("value")
                    }
                }
                var hotspot = new Quartz.Hotspot(params.hotspotGeometry);
                var x = Math.cos(latitude) * Math.cos(longitude) * -1;
                var y = Math.sin(latitude);
                var z = Math.cos(latitude) * Math.sin(longitude) * -1;
                hotspot.translateOnAxis(new THREE.Vector3(x, y, z), depth);
                hotspot.lookAt(new THREE.Vector3(0, 0, 0));
                hotspot.name = hotspotNode.getAttribute("mediaId");
                hotspot.shift = hotspotNode.getAttribute("shift").toString().split(",");
                if (typeof params.hotspotSrc != "undefined") {
                    hotspot.backgroundSrc = params.hotspotSrc
                }
                if (typeof params.hotspotColor != "undefined") {
                    hotspot.backgroundColor = parseInt(params.hotspotColor, 16)
                }
                if (typeof params.hotspotTriggers != "undefined") {
                    hotspot.triggers = params.hotspotTriggers.split(",")
                }
                if (typeof params.loadingDuration != "undefined") {
                    hotspot.loadingDuration = parseInt(params.loadingDuration, 10)
                }
                if (typeof params.loadingEffect != "undefined") {
                    hotspot.loadingEffect = params.loadingEffect
                }
                this.addHotspot(hotspot);
                hotspotNode = hotspotResult.iterateNext()
            }
        }
    });
    Object.defineProperty(Quartz.Experience.prototype, "onXmlLoad", {
        writable: !1,
        enumerable: !1,
        value: function(event) {
            this.xmlDocument = event.currentTarget.responseXML;
            if (this.xmlDocument != null) {
                this.config = this.defaultConfig;
                for (var i = 0; i < this.hotspots.length; i++) {
                    this.player.mesh.remove(this.hotspots[i])
                }
                this.parseConfig();
                this.parseMedia(this.startMediaId);
                this.parseHotspots(this.startMediaId)
            }
        }
    })
})();
(function() {
    "use strict";
    Quartz.Controls = function(id) {
        var _player = null;
        Object.defineProperty(this, "id", {
            writable: !1,
            value: id || ""
        });
        Object.defineProperty(this, "euler", {
            writable: !1,
            value: new THREE.Euler(0, 0, 0, "YXZ")
        });
        Object.defineProperty(this, "player", {
            get: function() {
                return _player
            },
            set: function(newPlayer) {
                var oldPlayer = _player;
                if (newPlayer instanceof Quartz.Player) {
                    newPlayer.addControls(this)
                } else if (oldPlayer instanceof Quartz.Player) {
                    oldPlayer.removeControls(this)
                }
                this.willSetPlayer(oldPlayer, newPlayer);
                _player = newPlayer;
                this.didSetPlayer(oldPlayer, newPlayer)
            }
        })
    };
    Object.defineProperty(Quartz.Controls.prototype, "willSetPlayer", {
        configurable: !0,
        enumerable: !0,
        writable: !1,
        value: function(oldPlayer, newPlayer) {}
    });
    Object.defineProperty(Quartz.Controls.prototype, "didSetPlayer", {
        configurable: !0,
        enumerable: !0,
        writable: !1,
        value: function(oldPlayer, newPlayer) {}
    })
})();
(function() {
    "use strict";
    Quartz.GyroControls = function() {
        Quartz.Controls.call(this, "gyro");
        Object.defineProperty(this, "useGyro", {
            configurable: !0,
            enumerable: !1,
            writable: !0,
            value: !0
        });
        Object.defineProperty(this, "previous", {
            configurable: !0,
            enumerable: !1,
            writable: !0,
            value: {
                alpha : 0,
                beta : 0,
                gamma : 0
            }
        });
        var desktopSystems = [{
            osFamily: "Windows",
            name: "Chrome"
        }, {
            osFamily: "OS X",
            name: "Chrome"
        }];
        for (var i = 0; i < desktopSystems.length; i++) {
            if (platform.os.family == desktopSystems[i].osFamily && platform.name == desktopSystems[i].name) {
                this.useGyro = !1
            }
        }
        Object.defineProperty(this, "topWindow", {
            configurable: !0,
            enumerable: !1,
            writable: !0,
            value: window
        });
        while (this.topWindow != this.topWindow.top) {
            this.topWindow = this.topWindow.top;
        }
        Object.defineProperty(this, "useGyro", {
            configurable: !1
        });
        Object.defineProperty(this, "topWindow", {
            configurable: !1
        });
        window.addEventListener("deviceorientation", this.onDeviceOrientation.bind(this), !1);
    };
    Quartz.GyroControls.prototype = Object.create(Quartz.Controls.prototype);
    Quartz.GyroControls.prototype.constructor = Quartz.GyroControls;

    Object.defineProperty(Quartz.GyroControls.prototype, "onDeviceOrientation", {
        value: function(event) {
            if (!this.useGyro) {
                return
            }

            if(event.absolute) {
                alert("This device does not have a gyroscope, you can only move the screen with touch.");
                this.useGyro = false;
                window.removeEventListener("deviceorientation", this.onDeviceOrientation.bind(this), !1);
                return;
            }
            //alert( "Display euler angles in absolute? " + (event.absolute ? "Y" : "N") );

            var alpha = event.alpha ? THREE.Math.degToRad(event.alpha) : 0;
            var beta = event.beta ? THREE.Math.degToRad(event.beta) : 0;
            var gamma = event.gamma ? THREE.Math.degToRad(event.gamma) : 0;

            var euler = new THREE.Euler(beta, alpha, -gamma, "YXZ");
            var quaternion = new THREE.Quaternion;
            quaternion.setFromEuler(euler);
            quaternion.multiply(new THREE.Quaternion(-Math.sqrt(.5), 0, 0, Math.sqrt(.5)));
            if (this.topWindow.orientation == 90 || this.topWindow.orientation == -90) {
                var sign = -90 / this.topWindow.orientation;
                quaternion.multiply(new THREE.Quaternion(0, 0, sign * Math.sqrt(.5), Math.sqrt(.5)));
            }
            this.euler.setFromQuaternion(quaternion, "YXZ");
        }
    });
})();
(function() {
    "use strict";
    Quartz.KeyboardControls = function() {
        Quartz.Controls.call(this, "keyboard");
        window.addEventListener("keydown", this.onKeyDown.bind(this), !1)
    };
    Quartz.KeyboardControls.prototype = Object.create(Quartz.Controls.prototype);
    Quartz.KeyboardControls.prototype.constructor = Quartz.KeyboardControls;
    Object.defineProperty(Quartz.KeyboardControls.prototype, "onKeyDown", {
        value: function(event) {
            switch (event.keyCode) {
                case 32:
                    if (this.player && this.player.paused) {
                        this.player.play();
                    } else {
                        this.player.pause();
                    }
                    break;
                case 37:
                    this.euler.y = this.euler.y + .05;
                    break;
                case 38:
                    this.euler.x = this.euler.x + .05;
                    break;
                case 39:
                    this.euler.y = this.euler.y - .05;
                    break;
                case 40:
                    this.euler.x = this.euler.x - .05;
                    break
            }
        }
    })
})();
(function() {
    "use strict";
    Quartz.MouseControls = function() {
        Quartz.Controls.call(this, "mouse");
        Object.defineProperty(this, "listeners", {
            writable: !1,
            enumerable: !1,
            value: {
                mousedown: this.onMouseDown.bind(this),
                mousemove: this.onMouseMove.bind(this),
                mouseup: this.onMouseUp.bind(this),
                mouseleave: this.onMouseUp.bind(this)
            }
        });
        Object.defineProperty(this, "isUserInteracting", {
            writable: !0,
            value: !1
        });
        Object.defineProperty(this, "mouseClientX", {
            writable: !0,
            value: 0
        });
        Object.defineProperty(this, "mouseClientY", {
            writable: !0,
            value: 0
        })
    };
    Quartz.MouseControls.prototype = Object.create(Quartz.Controls.prototype);
    Quartz.MouseControls.prototype.constructor = Quartz.MouseControls;
    Object.defineProperty(Quartz.MouseControls.prototype, "willSetPlayer", {
        value: function(oldPlayer, newPlayer) {
            if (oldPlayer instanceof Quartz.Player) {
                for (var eventType in this.listeners) {
                    oldPlayer.domElement.removeEventListener(eventType, this.listeners[eventType], !1)
                }
            }
            if (newPlayer instanceof Quartz.Player) {
                for (var eventType in this.listeners) {
                    newPlayer.domElement.addEventListener(eventType, this.listeners[eventType], !1)
                }
            }
        }
    });
    Object.defineProperty(Quartz.MouseControls.prototype, "onMouseDown", {
        value: function(event) {
            this.isUserInteracting = !0;
            this.mouseClientX = event.clientX;
            this.mouseClientY = event.clientY
        }
    });
    Object.defineProperty(Quartz.MouseControls.prototype, "onMouseMove", {
        value: function(event) {
            if (this.isUserInteracting) {
                var mouseDeltaX = event.clientX - this.mouseClientX;
                this.euler.y = this.euler.y + mouseDeltaX * .002;
                this.mouseClientX = event.clientX;
                var mouseDeltaY = event.clientY - this.mouseClientY;
                this.euler.x = this.euler.x + mouseDeltaY * .002;
                this.mouseClientY = event.clientY
            }
        }
    });
    Object.defineProperty(Quartz.MouseControls.prototype, "onMouseUp", {
        value: function(event) {
            this.isUserInteracting = !1
        }
    })
})();
(function() {
    "use strict";
    Quartz.TouchControls = function() {
        var controls = this;
        Quartz.Controls.call(this, "touch");
        Object.defineProperty(this, "listeners", {
            writable: !1,
            enumerable: !1,
            value: {
                touchstart: this.onTouchStart.bind(this),
                touchmove: this.onTouchMove.bind(this),
                touchend: this.onTouchEnd.bind(this)
            }
        });
        Object.defineProperty(this, "isUserInteracting", {
            writable: !0,
            value: !1
        });
        Object.defineProperty(this, "touchClientX", {
            writable: !0,
            value: 0
        });
        Object.defineProperty(this, "touchClientY", {
            writable: !0,
            value: 0
        });
        Object.defineProperty(this, "smoothResetDelay", {
            writable: !0,
            value: 1500
        });
        Object.defineProperty(this, "smoothResetDuration", {
            writable: !0,
            value: 2e3
        });
        Object.defineProperty(this, "smoothResetTimeoutId", {
            writable: !0,
            value: -1
        });
        Object.defineProperty(this, "smoothResetIntervalId", {
            writable: !0,
            value: -1
        });
        Object.defineProperty(this, "autoReset", {
            writable: !0,
            value: !0
        })
    };
    Quartz.TouchControls.prototype = Object.create(Quartz.Controls.prototype);
    Quartz.TouchControls.prototype.constructor = Quartz.TouchControls;
    Object.defineProperty(Quartz.TouchControls.prototype, "willSetPlayer", {
        value: function(oldPlayer, newPlayer) {
            if (oldPlayer instanceof Quartz.Player) {
                for (var eventType in this.listeners) {
                    oldPlayer.domElement.removeEventListener(eventType, this.listeners[eventType], !1)
                }
            }
            if (newPlayer instanceof Quartz.Player) {
                for (var eventType in this.listeners) {
                    newPlayer.domElement.addEventListener(eventType, this.listeners[eventType], !1)
                }
            }
        }
    });
    Object.defineProperty(Quartz.TouchControls.prototype, "onTouchStart", {
        value: function(event) {
            var pos =
            {
                    x : event.touches[0].clientX,
                    y : event.touches[0].clientY
            };


            clearTimeout(this.smoothResetTimeoutId);
            this.smoothResetTimeoutId = -1;
            clearInterval(this.smoothResetIntervalId);
            this.smoothResetIntervalId = -1;
            this.isUserInteracting = !0;
            this.touchClientX = event.touches[0].clientX;
            this.touchClientY = event.touches[0].clientY;
            this.isUserMoving = !1
        }
    });
    Object.defineProperty(Quartz.TouchControls.prototype, "onTouchMove", {
        value: function(event) {
            if (this.isUserInteracting) {
                var touchDeltaX = event.touches[0].clientX - this.touchClientX;
                this.euler.y = this.euler.y + touchDeltaX * .002;
                this.touchClientX = event.touches[0].clientX;
                var touchDeltaY = event.touches[0].clientY - this.touchClientY;
                this.euler.x = this.euler.x + touchDeltaY * .002;
                this.touchClientY = event.touches[0].clientY;
                this.isUserMoving = !0
            }
        }
    });
    Object.defineProperty(Quartz.TouchControls.prototype, "onTouchEnd", {
        value: function(event) {
            this.isUserInteracting = !1;
            if (!this.isUserMoving) {
                var pageX = (this.touchClientX - this.player.domElement.getBoundingClientRect().left) / this.player.domElement.getBoundingClientRect().width * 2 - 1;
                var pageY = (this.touchClientY - this.player.domElement.getBoundingClientRect().top) / this.player.domElement.getBoundingClientRect().height * 2 - 1;
                this.player.experience.intersectHotspots("tap", new THREE.Vector2(pageX, -pageY))
            }
            this.isUserMoving = !1;
            if (this.autoReset) {
                this.smoothResetTimeoutId = setTimeout(function(controls) {
                    controls.smoothReset()
                }, this.smoothResetDelay, this)
            }
        }
    });
    Object.defineProperty(Quartz.TouchControls.prototype, "smoothReset", {
        value: function(startTimestamp) {
            clearInterval(this.smoothResetIntervalId);
            this.smoothResetIntervalId = -1;
            this.smoothResetIntervalId = setInterval(function(controls, startTimestamp, startX) {
                controls.processReset(startTimestamp, startX)
            }, 40, this, Date.now(), this.euler.x)
        }
    });
    Object.defineProperty(Quartz.TouchControls.prototype, "processReset", {
        enumerable: !1,
        value: function(startTimestamp, startX) {
            var now = Date.now();
            var delta = now - startTimestamp;
            var t = Math.min(1, delta / this.smoothResetDuration);
            var progress = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
            this.euler.x = startX * (1 - progress);
            if (delta > this.smoothResetDuration) {
                clearInterval(this.smoothResetIntervalId);
                this.smoothResetIntervalId = -1
            }
        }
    })
})();
(function() {
    "use strict";
    Quartz.DisplayControls = function() {
        var controls = this;
        Quartz.Controls.call(this, "display");
        Object.defineProperty(this, "listeners", {
            writable: !1,
            enumerable: !1,
            value: {
                loadedmetadata: this.onLoadedMetadata.bind(this),
                timeupdate: this.onTimeUpdate.bind(this),
                mousedown: this.onMouseDown.bind(this),
                mouseup: this.onMouseUp.bind(this)
            }
        });
        Object.defineProperty(this, "fadeTimeoutId", {
            writable: !0,
            value: -1
        });
        Object.defineProperty(this, "mouseDownProperties", {
            writable: !0,
            value: null
        });
        Object.defineProperty(this, "seeking", {
            enumerable: !1,
            writable: !0,
            value: !1
        });
        Object.defineProperty(this, "seekingPaused", {
            enumerable: !1,
            writable: !0,
            value: !1
        });
        Object.defineProperty(this, "domElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "playButtonElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "pauseButtonElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "expandButtonElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "reduceButtonElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "currentTimeElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "progressBarElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "progressBackgroundElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "progressForegroundElement", {
            writable: !1,
            value: document.createElement("div")
        });
        Object.defineProperty(this, "progressCursorElement", {
            writable: !1,
            value: document.createElement("div")
        });

        this.domElement.className = "quartz controls";
        this.domElement.style.opacity = "1";
        this.domElement.style.visibility = "visible";
        this.domElement.style.pointerEvents = "auto";
        this.playButtonElement.className = "quartz playButton";
        this.playButtonElement.style.visibility = "visible";
        this.playButtonElement.style.pointerEvents = "auto";
        this.pauseButtonElement.className = "quartz pauseButton";
        this.pauseButtonElement.style.visibility = "visible";
        this.pauseButtonElement.style.pointerEvents = "auto";
        this.expandButtonElement.className = "quartz expandButton";
        this.expandButtonElement.style.visibility = "hidden";
        this.expandButtonElement.style.pointerEvents = "auto";
        this.reduceButtonElement.className = "quartz reduceButton";
        this.reduceButtonElement.style.visibility = "hidden";
        this.reduceButtonElement.style.pointerEvents = "auto";
        this.currentTimeElement.className = "quartz currentTime";
        this.currentTimeElement.style.visibility = "visible";
        this.currentTimeElement.style.pointerEvents = "auto";
        this.currentTimeElement.innerHTML = "0:00 / 0:00";
        this.progressBarElement.className = "quartz progressBar";
        this.progressBarElement.style.visibility = "visible";
        this.progressBarElement.style.pointerEvents = "auto";
        this.progressBackgroundElement.className = "quartz progressBackground";
        this.progressBackgroundElement.style.visibility = "inherit";
        this.progressBackgroundElement.style.pointerEvents = "auto";
        this.progressForegroundElement.className = "quartz progressForeground";
        this.progressForegroundElement.style.visibility = "inherit";
        this.progressForegroundElement.style.pointerEvents = "auto";
        this.progressCursorElement.className = "quartz progressCursor";
        this.progressCursorElement.style.visibility = "inherit";
        this.progressCursorElement.style.pointerEvents = "auto";
        this.playButtonElement.addEventListener("click", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.play();
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.pauseButtonElement.addEventListener("click", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.pause();
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.expandButtonElement.addEventListener("click", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.fullScreen = !0;
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.expandButtonElement.addEventListener("touchstart", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.fullScreen = !0;
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.reduceButtonElement.addEventListener("click", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.fullScreen = !1;
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.reduceButtonElement.addEventListener("touchstart", function(event) {
            if (controls.domElement.style.pointerEvents != "none") {
                controls.player.fullScreen = !1;
                controls.refreshDisplay()
            }
            controls.showDisplay(!0)
        }, !1);
        this.progressBarElement.addEventListener("mousedown", this.onDragDown.bind(this), !1);
        document.body.addEventListener("mousemove", this.onDragMove.bind(this), !0);
        document.body.addEventListener("mouseup", this.onDragUp.bind(this), !1);
        this.domElement.appendChild(this.playButtonElement);
        this.domElement.appendChild(this.pauseButtonElement);
        this.domElement.appendChild(this.expandButtonElement);
        this.domElement.appendChild(this.reduceButtonElement);
        this.domElement.appendChild(this.currentTimeElement);
        this.domElement.appendChild(this.progressBarElement);
        this.progressBarElement.appendChild(this.progressBackgroundElement);
        this.progressBarElement.appendChild(this.progressForegroundElement);
        this.progressBarElement.appendChild(this.progressCursorElement)
    };
    Quartz.DisplayControls.prototype = Object.create(Quartz.Controls.prototype);
    Quartz.DisplayControls.prototype.constructor = Quartz.DisplayControls;
    Object.defineProperty(Quartz.DisplayControls.prototype, "willSetPlayer", {
        value: function(oldPlayer, newPlayer) {
            if (oldPlayer instanceof Quartz.Player) {
                oldPlayer.domElement.removeChild(this.domElement);
                oldPlayer.domElement.removeEventListener("mousedown", this.listeners.mousedown, !1);
                oldPlayer.domElement.removeEventListener("mouseup", this.listeners.mouseup, !1);
                oldPlayer.removeEventListener("loadedmetadata", this.listeners.timeupdate, !1);
                oldPlayer.removeEventListener("timeupdate", this.listeners.timeupdate, !1)
            }
            if (newPlayer instanceof Quartz.Player) {
                newPlayer.domElement.appendChild(this.domElement);
                newPlayer.domElement.addEventListener("mousedown", this.listeners.mousedown, !1);
                newPlayer.domElement.addEventListener("mouseup", this.listeners.mouseup, !1);
                newPlayer.addEventListener("loadedmetadata", this.listeners.loadedmetadata, !1);
                newPlayer.addEventListener("timeupdate", this.listeners.timeupdate, !1)
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "didSetPlayer", {
        value: function(oldPlayer, newPlayer) {
            this.refreshDisplay();
            this.showDisplay(!1)
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "showDisplay", {
        value: function(autofade) {
            autofade = autofade === !0 ? !0 : !1;
            clearTimeout(this.fadeTimeoutId);
            this.fadeTimeoutId = 0;
            this.domElement.style.transition = "";
            this.domElement.style.visibility = "visible";
            this.domElement.style.pointerEvents = "auto";
            this.domElement.style.opacity = 1;
            var fadeoutDelay = 1e3;
            var fadeoutDuration = 500;
            if (autofade) {
                this.fadeTimeoutId = setTimeout(function(controls) {
                    controls.hideDisplay(fadeoutDuration);
                    controls.fadeTimeoutId = 0
                }, fadeoutDelay, this)
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "hideDisplay", {
        value: function(duration) {
            duration = isNaN(duration) ? 0 : duration;
            clearTimeout(this.fadeTimeoutId);
            this.fadeTimeoutId = 0;
            this.domElement.style.transition = "opacity " + duration + "ms ease-in, visibility " + duration + "ms ease-in";
            this.domElement.style.opacity = 0;
            this.domElement.style.visibility = "hidden";
            setTimeout(function(controls) {
                if (controls.domElement.style.visibility == "hidden") {
                    controls.domElement.style.pointerEvents = "none"
                }
            }, duration, this)
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "refreshDisplay", {
        value: function() {
            if (this.player instanceof Quartz.Player) {
                this.expandButtonElement.style.visibility = this.player.fullScreen ? "hidden" : "visible";
                this.reduceButtonElement.style.visibility = this.player.fullScreen ? "visible" : "hidden";
                if (this.player.src == "") {
                    this.playButtonElement.style.visibility = "hidden";
                    this.pauseButtonElement.style.visibility = "hidden";
                    this.progressBarElement.style.visibility = "hidden";
                    this.currentTimeElement.style.visibility = "hidden"
                } else {
                    this.playButtonElement.style.visibility = this.player.paused ? "visible" : "hidden";
                    this.pauseButtonElement.style.visibility = this.player.paused ? "hidden" : "visible";
                    this.progressBarElement.style.visibility = "visible";
                    this.currentTimeElement.style.visibility = "visible"
                }
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "refreshCurrentTime", {
        enumerable: !0,
        writable: !1,
        value: function() {
            var totalSeconds = parseInt(this.player.duration % 60, 10);
            if (totalSeconds < 10) {
                totalSeconds = "0" + totalSeconds
            }
            var totalMinutes = (parseInt(this.player.duration, 10) - totalSeconds) / 60;
            var currentSeconds = parseInt(this.player.currentTime % 60, 10);
            if (currentSeconds < 10) {
                currentSeconds = "0" + currentSeconds
            }
            var currentMinutes = (parseInt(this.player.currentTime, 10) - currentSeconds) / 60;
            this.currentTimeElement.innerHTML = currentMinutes + ":" + currentSeconds + " / " + totalMinutes + ":" + totalSeconds;
            var progression = this.player.currentTime / this.player.duration;
            var backWidth = this.progressBackgroundElement.getBoundingClientRect().width;
            var cursorLeft = backWidth * progression;
            var frontWidth = backWidth * progression;
            this.progressCursorElement.style.left = cursorLeft + "px";
            this.progressForegroundElement.style.width = frontWidth + "px"
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "moveProgressCursorTo", {
        enumerable: !0,
        writable: !1,
        value: function(clientX) {
            var progressBarLeft = this.progressBackgroundElement.getBoundingClientRect().left;
            var progressBarWidth = this.progressBackgroundElement.getBoundingClientRect().width;
            var progressX = clientX - progressBarLeft;
            if (progressX < 0 || progressX > progressBarWidth) {
                return
            }
            var progress = progressX / progressBarWidth;
            this.progressForegroundElement.style.width = progressX + "px";
            this.progressCursorElement.style.left = progressX + "px";
            this.player.currentTime = this.player.duration * progress
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onLoadedMetadata", {
        enumerable: !0,
        writable: !1,
        value: function(event) {
            this.refreshDisplay();
            this.refreshCurrentTime()
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onTimeUpdate", {
        enumerable: !0,
        writable: !1,
        value: function(event) {
            this.refreshCurrentTime()
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onMouseDown", {
        value: function(event) {
            if (event.target != this.player.renderer.domElement && event.target != this.domElement) {
                return
            }
            if (this.mouseDownProperties == null) {
                this.mouseDownProperties = {
                    button: event.button,
                    clientX: event.clientX,
                    clientY: event.clientY,
                    timeStamp: Date.now()
                }
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onMouseUp", {
        value: function(event) {
            if (this.mouseDownProperties == null) {
                return
            }
            var mouseUpProperties = {
                button: event.button,
                clientX: event.clientX,
                clientY: event.clientY,
                timeStamp: Date.now()
            };
            var deltaT = mouseUpProperties.timeStamp - this.mouseDownProperties.timeStamp;
            var deltaX = mouseUpProperties.clientX - this.mouseDownProperties.clientX;
            var deltaY = mouseUpProperties.clientY - this.mouseDownProperties.clientY;
            this.mouseDownProperties = null;
            if (deltaT > 250 || deltaX > 10 || deltaY > 10) {
                return
            }
            if (this.domElement.style.visibility == "hidden") {
                this.refreshDisplay();
                this.showDisplay(!0)
            } else if (this.fadeTimeoutId != 0) {
                this.hideDisplay(0)
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onDragDown", {
        value: function(event) {
            if (this.domElement.style.pointerEvents != "none") {
                this.seekingPaused = this.player.paused;
                this.seeking = !0;
                this.player.pause();
                this.showDisplay(!1);
                this.moveProgressCursorTo(event.clientX)
            }
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onDragMove", {
        value: function(event) {
            if (!this.seeking) {
                return
            }
            event.stopPropagation();
            this.moveProgressCursorTo(event.clientX)
        }
    });
    Object.defineProperty(Quartz.DisplayControls.prototype, "onDragUp", {
        value: function(event) {
            if (this.seeking) {
                if (!this.seekingPaused) {
                    this.player.play()
                }
                this.seeking = !1;
                this.showDisplay(!0)
            }
        }
    })
})();
(function() {
    "use strict";
    console.log("------ QuartzVR by XXII ------");
    if (platform.name == "Chrome" && window.location.protocol == "file:") {
        window.alert("QuartzVR does not support local deployment using file:// protocol due to Chrome limitations. Please use an other web browser or a local web server instead.")
    }
    Quartz.LICENSE = "ok";
    if (window.location.protocol != "file:") {
        var xhr = new XMLHttpRequest;
        var location = window.location.hostname;
        xhr.addEventListener("load", function(event) {
            Object.defineProperty(Quartz, "LICENSE", {
                enumerable: !1,
                writable: !1,
                value: "ok"
            })
        }, !1);
        xhr.open("GET", "http://quartzvr.io/license/" + location, !0);
        xhr.send()
    }
    var player = null;
    if (platform.product == "iPhone") {
        player = Quartz.iPhonePlayer
    } else if (platform.os.family == "iOS") {
        player = Quartz.iOSPlayer
    } else {
        player = Quartz.DefaultPlayer
    }
    Object.defineProperty(Quartz, "Player", {
        enumerable: !0,
        writable: !1,
        value: player
    });
    var detectPlayers = function(mutations) {
        if (mutations instanceof Array) {
            if (mutations.length == 0) {
                return
            }
            if (mutations[0].addedNodes.item(0) == null) {
                return
            }
            if (typeof mutations[0].addedNodes.item(0).className == "undefined") {
                return
            }
            if (mutations[0].addedNodes.length > 0 && mutations[0].addedNodes.item(0).className.indexOf("firebug") > -1) {
                return
            }
            if (mutations[0].removedNodes.length > 0 && mutations[0].removedNodes.item(0).className.indexOf("firebug") > -1) {
                return
            }
        }
        var playerElements = document.getElementsByClassName(Quartz.CLASSNAME);
        var players = Quartz.getPlayers();
        playerElements = Array.prototype.filter.call(playerElements, function(playerElement) {
            for (var i in players) {
                if (players[i].domElement == playerElement) {
                    return !1
                }
            }
            return !0
        });
        playerElements.forEach(function(playerElement, index, elements) {
            Quartz.createPlayer(playerElement)
        })
    };
    detectPlayers();
    window.addEventListener("load", detectPlayers, !1);
    window.addEventListener("load", function(event) {
        var observer = new MutationObserver(detectPlayers);
        observer.observe(document.body, {
            childList: !0,
            subtree: !0
        })
    }, !1)
})()
